GETLINE(3)                                                      Linux Programmer's Manual                                                     GETLINE(3)

NAME
       getline, getdelim - delimited string input

SYNOPSIS
       #include <stdio.h>

       ssize_t getline(char **lineptr, size_t *n, FILE *stream);

       ssize_t getdelim(char **lineptr, size_t *n, int delim, FILE *stream);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       getline(), getdelim():
           Since glibc 2.10:
               _POSIX_C_SOURCE >= 200809L
           Before glibc 2.10:
               _GNU_SOURCE

DESCRIPTION
       getline()  reads  an entire line from stream, storing the address of the buffer containing the text into *lineptr.  The buffer is null-terminated
       and includes the newline character, if one was found.

       If *lineptr is set to NULL and *n is set 0 before the call, then getline() will allocate a buffer for storing the line.  This  buffer  should  be
       freed by the user program even if getline() failed.

       Alternatively,  before  calling getline(), *lineptr can contain a pointer to a malloc(3)-allocated buffer *n bytes in size.  If the buffer is not
       large enough to hold the line, getline() resizes it with realloc(3), updating *lineptr and *n as necessary.

       In either case, on a successful call, *lineptr and *n will be updated to reflect the buffer address and allocated size respectively.

       getdelim() works like getline(), except that a line delimiter other than newline can be specified as the delimiter argument.  As with  getline(),
       a delimiter character is not added if one was not present in the input before end of file was reached.

RETURN VALUE
       On  success,  getline() and getdelim() return the number of characters read, including the delimiter character, but not including the terminating
       null byte ('\0').  This value can be used to handle embedded null bytes in the line read.

       Both functions return -1 on failure to read a line (including end-of-file condition).  In the event of an error, errno is  set  to  indicate  the
       cause.

ERRORS
       EINVAL Bad arguments (n or lineptr is NULL, or stream is not valid).

       ENOMEM Allocation or reallocation of the line buffer failed.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌──────────────────────┬───────────────┬─────────┐
       │Interface             │ Attribute     │ Value   │
       ├──────────────────────┼───────────────┼─────────┤
       │getline(), getdelim() │ Thread safety │ MT-Safe │
       └──────────────────────┴───────────────┴─────────┘

CONFORMING TO
       Both getline() and getdelim() were originally GNU extensions.  They were standardized in POSIX.1-2008.

EXAMPLES
       #define _GNU_SOURCE
       #include <stdio.h>
       #include <stdlib.h>

       int
       main(int argc, char *argv[])
       {
           FILE *stream;
           char *line = NULL;
           size_t len = 0;
           ssize_t nread;

           if (argc != 2) {
               fprintf(stderr, "Usage: %s <file>\n", argv[0]);
               exit(EXIT_FAILURE);
           }

           stream = fopen(argv[1], "r");
           if (stream == NULL) {
               perror("fopen");
               exit(EXIT_FAILURE);
           }

           while ((nread = getline(&line, &len, stream)) != -1) {
               printf("Retrieved line of length %zd:\n", nread);
               fwrite(line, nread, 1, stdout);
           }

           free(line);
           fclose(stream);
           exit(EXIT_SUCCESS);
       }

SEE ALSO
       read(2), fgets(3), fopen(3), fread(3), scanf(3)

COLOPHON
       This page is part of release 5.10 of the Linux man-pages project.  A description of the project, information about reporting bugs, and the latest
       version of this page, can be found at https://www.kernel.org/doc/man-pages/.

GNU                                                                    2020-11-01                                                             GETLINE(3)
READ(2)                                                         Linux Programmer's Manual                                                        READ(2)

NAME
       read - read from a file descriptor

SYNOPSIS
       #include <unistd.h>

       ssize_t read(int fd, void *buf, size_t count);

DESCRIPTION
       read() attempts to read up to count bytes from file descriptor fd into the buffer starting at buf.

       On  files  that support seeking, the read operation commences at the file offset, and the file offset is incremented by the number of bytes read.
       If the file offset is at or past the end of file, no bytes are read, and read() returns zero.

       If count is zero, read() may detect the errors described below.  In the absence of any errors, or if read() does not check for errors,  a  read()
       with a count of 0 returns zero and has no other effects.

       According to POSIX.1, if count is greater than SSIZE_MAX, the result is implementation-defined; see NOTES for the upper limit on Linux.

RETURN VALUE
       On  success,  the  number of bytes read is returned (zero indicates end of file), and the file position is advanced by this number.  It is not an
       error if this number is smaller than the number of bytes requested; this may happen for example because fewer bytes are actually available  right
       now (maybe because we were close to end-of-file, or because we are reading from a pipe, or from a terminal), or because read() was interrupted by
       a signal.  See also NOTES.

       On error, -1 is returned, and errno is set appropriately.  In this case, it is left unspecified whether the file position (if any) changes.

ERRORS
       EAGAIN The file descriptor fd refers to a file other than a socket and has been marked nonblocking (O_NONBLOCK), and the read would  block.   See
              open(2) for further details on the O_NONBLOCK flag.

       EAGAIN or EWOULDBLOCK
              The file descriptor fd refers to a socket and has been marked nonblocking (O_NONBLOCK), and the read would block.  POSIX.1-2001 allows ei‐
              ther error to be returned for this case, and does not require these constants to have the same value, so  a  portable  application  should
              check for both possibilities.

       EBADF  fd is not a valid file descriptor or is not open for reading.

       EFAULT buf is outside your accessible address space.

       EINTR  The call was interrupted by a signal before any data was read; see signal(7).

       EINVAL fd  is attached to an object which is unsuitable for reading; or the file was opened with the O_DIRECT flag, and either the address speci‐
              fied in buf, the value specified in count, or the file offset is not suitably aligned.

       EINVAL fd was created via a call to timerfd_create(2) and the wrong size buffer was given to read(); see timerfd_create(2) for  further  informa‐
              tion.

       EIO    I/O  error.   This will happen for example when the process is in a background process group, tries to read from its controlling terminal,
              and either it is ignoring or blocking SIGTTIN or its process group is orphaned.  It may also occur when there is  a  low-level  I/O  error
              while  reading  from a disk or tape.  A further possible cause of EIO on networked filesystems is when an advisory lock had been taken out
              on the file descriptor and this lock has been lost.  See the Lost locks section of fcntl(2) for further details.

       EISDIR fd refers to a directory.

       Other errors may occur, depending on the object connected to fd.

CONFORMING TO
       SVr4, 4.3BSD, POSIX.1-2001.

NOTES
       The types size_t and ssize_t are, respectively, unsigned and signed integer data types specified by POSIX.1.

       On Linux, read() (and similar system calls) will transfer at most 0x7ffff000 (2,147,479,552) bytes, returning the number of bytes actually trans‐
       ferred.  (This is true on both 32-bit and 64-bit systems.)

       On  NFS filesystems, reading small amounts of data will update the timestamp only the first time, subsequent calls may not do so.  This is caused
       by client side attribute caching, because most if not all NFS clients leave st_atime (last file access time) updates to the  server,  and  client
       side reads satisfied from the client's cache will not cause st_atime updates on the server as there are no server-side reads.  UNIX semantics can
       be obtained by disabling client-side attribute caching, but in most situations this will substantially increase server load and decrease  perfor‐
       mance.

BUGS
       According to POSIX.1-2008/SUSv4 Section XSI 2.9.7 ("Thread Interactions with Regular File Operations"):

           All of the following functions shall be atomic with respect to each other in the effects specified in POSIX.1-2008 when they operate on regu‐
           lar files or symbolic links: ...

       Among the APIs subsequently listed are read() and readv(2).  And among the effects that should be atomic across threads (and processes)  are  up‐
       dates  of  the  file  offset.  However, on Linux before version 3.14, this was not the case: if two processes that share an open file description
       (see open(2)) perform a read() (or readv(2)) at the same time, then the I/O operations were not atomic with respect  updating  the  file  offset,
       with the result that the reads in the two processes might (incorrectly) overlap in the blocks of data that they obtained.  This problem was fixed
       in Linux 3.14.

SEE ALSO
       close(2), fcntl(2), ioctl(2), lseek(2), open(2), pread(2), readdir(2), readlink(2), readv(2), select(2), write(2), fread(3)

COLOPHON
       This page is part of release 5.10 of the Linux man-pages project.  A description of the project, information about reporting bugs, and the latest
       version of this page, can be found at https://www.kernel.org/doc/man-pages/.

Linux                                                                  2018-02-02                                                                READ(2)STRTOK(3)                                                       Linux Programmer's Manual                                                      STRTOK(3)

NAME
       strtok, strtok_r - extract tokens from strings

SYNOPSIS
       #include <string.h>

       char *strtok(char *str, const char *delim);

       char *strtok_r(char *str, const char *delim, char **saveptr);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       strtok_r(): _POSIX_C_SOURCE
           || /* Glibc versions <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

DESCRIPTION
       The  strtok()  function  breaks a string into a sequence of zero or more nonempty tokens.  On the first call to strtok(), the string to be parsed
       should be specified in str.  In each subsequent call that should parse the same string, str must be NULL.

       The delim argument specifies a set of bytes that delimit the tokens in the parsed string.  The caller may specify different strings in  delim  in
       successive calls that parse the same string.

       Each call to strtok() returns a pointer to a null-terminated string containing the next token.  This string does not include the delimiting byte.
       If no more tokens are found, strtok() returns NULL.

       A sequence of calls to strtok() that operate on the same string maintains a pointer that determines the point from which to start  searching  for
       the  next  token.   The first call to strtok() sets this pointer to point to the first byte of the string.  The start of the next token is deter‐
       mined by scanning forward for the next nondelimiter byte in str.  If such a byte is found, it is taken as the start of the  next  token.   If  no
       such byte is found, then there are no more tokens, and strtok() returns NULL.  (A string that is empty or that contains only delimiters will thus
       cause strtok() to return NULL on the first call.)

       The end of each token is found by scanning forward until either the next delimiter byte is found or until the terminating null byte ('\0') is en‐
       countered.   If a delimiter byte is found, it is overwritten with a null byte to terminate the current token, and strtok() saves a pointer to the
       following byte; that pointer will be used as the starting point when searching for the next token.  In this case, strtok() returns a  pointer  to
       the start of the found token.

       From  the above description, it follows that a sequence of two or more contiguous delimiter bytes in the parsed string is considered to be a sin‐
       gle delimiter, and that delimiter bytes at the start or end of the string are ignored.  Put another way: the tokens returned by strtok() are  al‐
       ways  nonempty  strings.   Thus,  for  example, given the string "aaa;;bbb,", successive calls to strtok() that specify the delimiter string ";,"
       would return the strings "aaa" and "bbb", and then a null pointer.

       The strtok_r() function is a reentrant version of strtok().  The saveptr argument is a pointer to a char * variable that is  used  internally  by
       strtok_r() in order to maintain context between successive calls that parse the same string.

       On  the  first  call to strtok_r(), str should point to the string to be parsed, and the value of *saveptr is ignored (but see NOTES).  In subse‐
       quent calls, str should be NULL, and saveptr (and the buffer that it points to) should be unchanged since the previous call.

       Different strings may be parsed concurrently using sequences of calls to strtok_r() that specify different saveptr arguments.

RETURN VALUE
       The strtok() and strtok_r() functions return a pointer to the next token, or NULL if there are no more tokens.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌───────────┬───────────────┬───────────────────────┐
       │Interface  │ Attribute     │ Value                 │
       ├───────────┼───────────────┼───────────────────────┤
       │strtok()   │ Thread safety │ MT-Unsafe race:strtok │
       ├───────────┼───────────────┼───────────────────────┤
       │strtok_r() │ Thread safety │ MT-Safe               │
       └───────────┴───────────────┴───────────────────────┘
CONFORMING TO
       strtok()
              POSIX.1-2001, POSIX.1-2008, C89, C99, SVr4, 4.3BSD.

       strtok_r()
              POSIX.1-2001, POSIX.1-2008.

NOTES
       On some implementations, *saveptr is required to be NULL on the first call to strtok_r() that is being used to parse str.

BUGS
       Be cautious when using these functions.  If you do use them, note that:

       * These functions modify their first argument.

       * These functions cannot be used on constant strings.

       * The identity of the delimiting byte is lost.

       * The strtok() function uses a static buffer while parsing, so it's not thread safe.  Use strtok_r() if this matters to you.

EXAMPLES
       The program below uses nested loops that employ strtok_r() to break a string into a two-level hierarchy of tokens.  The first command-line  argu‐
       ment  specifies the string to be parsed.  The second argument specifies the delimiter byte(s) to be used to separate that string into "major" to‐
       kens.  The third argument specifies the delimiter byte(s) to be used to separate the "major" tokens into subtokens.

       An example of the output produced by this program is the following:

           $ ./a.out 'a/bbb///cc;xxx:yyy:' ':;' '/'
           1: a/bbb///cc
                    --> a
                    --> bbb
                    --> cc
           2: xxx
                    --> xxx
           3: yyy
                    --> yyy

   Program source

       #include <stdio.h>
       #include <stdlib.h>
       #include <string.h>

       int
       main(int argc, char *argv[])
       {
           char *str1, *str2, *token, *subtoken;
           char *saveptr1, *saveptr2;

           if (argc != 4) {
               fprintf(stderr, "Usage: %s string delim subdelim\n",
                       argv[0]);
               exit(EXIT_FAILURE);
           }

           for (int j = 1, str1 = argv[1]; ; j++, str1 = NULL) {
               token = strtok_r(str1, argv[2], &saveptr1);
               if (token == NULL)
                   break;
               printf("%d: %s\n", j, token);

               for (str2 = token; ; str2 = NULL) {
                   subtoken = strtok_r(str2, argv[3], &saveptr2);
                   if (subtoken == NULL)
                       break;
                   printf(" --> %s\n", subtoken);
               }
           }

           exit(EXIT_SUCCESS);
       }

       Another example program using strtok() can be found in getaddrinfo_a(3).

SEE ALSO
       index(3), memchr(3), rindex(3), strchr(3), string(3), strpbrk(3), strsep(3), strspn(3), strstr(3), wcstok(3)

COLOPHON
       This page is part of release 5.10 of the Linux man-pages project.  A description of the project, information about reporting bugs, and the latest
       version of this page, can be found at https://www.kernel.org/doc/man-pages/.

GNU                                                                    2020-11-01                                                              STRTOK(3)
